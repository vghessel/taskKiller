openapi: 3.0.3
info:
  title: Swagger Task Killer - OpenAPI 3.0
  description: |-
    Este é um servidor para o Task Killer baseado na especificação OpenAPI 3.0.

    _As rotas são baseadas em 3 models: listas, tarefas e o controle de usuarios._
    
    Links:
    - [GitHub - Task Killer](https://github.com/vghessel/taskKiller)
    - [Arquivo swagger.yaml no repositório](https://github.com/vghessel/taskKiller/blob/main/backend/swagger.yml)
  contact:
    email: vgerlachhessel@gmail.com
  version: 1.0.11
servers:
  - url: http://localhost:5000
tags:
  - name: tarefas
    description: Tudo sobre as tarefas
  - name: listas
    description: Tudo sobre as listas de tarefas
  - name: usuários
    description: Operações de login e signup
paths:
  /api/tasks:
    get:
      tags:
        - tarefas
      summary: Obter todas as tarefas
      description: Obtenha todas as tarefas sem filtro por ID
      responses:
        '200':
          description: Operação efetuada com sucesso!
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    post:
      tags:
        - tarefas
      summary: Criar tarefa
      description: Crie uma tarefa enviando as informações necessárias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Operação realizada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
  /api/tasks/{taskId}:
    get:
      tags:
        - tarefas
      summary: Obter uma tarefa pelo ID
      description: Obtenha uma tarefa enviando o ID através da URL
      parameters:
        - name: taskId
          in: path
          description: ID da tarefa que deseja buscar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operação efetuada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
        '400':
          description: ID inválido
        '404':
          description: Tarefa não encontrada
    put:
      tags:
        - tarefas
      summary: Atualizar uma tarefa existente pelo ID
      description: Atualize uma tarefa existente alterando os campos desejados
      parameters:
        - name: taskId
          in: path
          description: ID da tarefa que deseja atualizar
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Atualize uma tarefa já existente dentro de uma lista
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Operação efetuada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
        '400':
          description: ID inválido
        '404':
          description: Tarefa não encontrada
    delete:
      tags:
        - tarefas
      summary: Excluir uma tarefa pelo ID
      description: Exclue uma tarefa enviando o ID através da URL
      parameters:
        - name: taskId
          in: path
          description: ID da tarefa que deseja deletar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Tarefa excluída com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
        '400':
          description: ID inválido
        '404':
          description: Tarefa não encontrada
  /api/lists:
    get:
      tags:
        - listas
      summary: Obter todas as listas de tarefas
      description: Obtenha todas as listas sem filtro por ID
      responses:
        '200':
          description: Operação efetuada com sucesso!
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
    post:
      tags:
        - listas
      summary: Criar lista
      description: Crie uma lista enviando as informações necessárias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Operação realizada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
  /api/lists/{listId}:
    get:
      tags:
        - listas
      summary: Obter uma lista pelo ID
      description: Obtenha uma lista enviando o ID através da URL
      parameters:
        - name: listId
          in: path
          description: ID da lista que deseja buscar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Operação efetuada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
        '400':
          description: ID inválido
        '404':
          description: Lista não encontrada
    put:
      tags:
        - listas
      summary: Atualizar uma lista existente pelo ID
      description: Atualize uma lista existente alterando os campos desejados
      parameters:
        - name: listId
          in: path
          description: ID da lista que deseja atualizar
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Atualize uma lista já existente
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Operação efetuada com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
        '400':
          description: ID inválido
        '404':
          description: Lista não encontrada
    delete:
      tags:
        - listas
      summary: Excluir uma lista pelo ID
      description: Exclue uma lista enviando o ID através da URL
      parameters:
        - name: listId
          in: path
          description: ID da lista que deseja deletar
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista excluída com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'          
        '400':
          description: ID inválido
        '404':
          description: Lista não encontrada
  /api/signup:
    post:
          tags:
            - usuários
          summary: Criar um usuário
          description: Crie um novo usuário
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Order'
          responses:
            '200':
              description: Usuário cadastrado com sucesso!
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Order'
            '400':
              description: Invalid input
  /api/login:
    post:
          tags:
            - usuários
          summary: Fça login com um usuário
          description: Faça login com um usuário
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Order'
          responses:
            '200':
              description: Login bem-sucedido!
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Order'
            '401':
              description: Credenciais inválidas
            '400':
              description: Invalid input
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
